name: CI

on:
  workflow_dispatch:
  pull_request:
    branches: [ "mainline" ]
    paths-ignore:
      - "README.md"
  push:
    branches: [ "mainline" ]
    paths-ignore:
      - "README.md"

jobs:
  ci:
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:

          # MUSL Targets
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: arm-unknown-linux-musleabihf
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
          
          # Darwin targets
          - os: macos-latest
            target: x86_64-apple-darwin
        # - os: macos-latest
        #   target: aarch64-apple-darwin

          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            triplet: x64-windows-static-md
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            triplet: arm64-windows-static-md

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Setup cache
        uses: Swatinem/rust-cache@81d053bdb0871dcd3f10763c8cc60d0adc41762b # v1
        with:
          key: ${{ matrix.target }}

      - name: Install build deps for macos
        if: runner.os == 'macOS'
        run: brew install xz protobuf

      - name: Install cmake on windows
        if: runner.os == 'Windows'
        uses: lukka/get-cmake@latest

      - name: Install protoc on windows
        if: runner.os == 'Windows'
        uses: arduino/setup-protoc@v2
        with:
          version: "3.x"

      - name: Install vcpkg on windows
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: C:/vcpkg
          doNotUpdateVcpkg: true

      - name: Install liblzma on windows
        if: runner.os == 'Windows'
        run: |
          ${{ env.RUNVCPKG_VCPKG_ROOT }}/vcpkg.exe install liblzma --triplet ${{ matrix.triplet }}

      - name: Build binary
        uses: actions-rs/cargo@844f36862e911db73fe0815f00a4a2602c279505 # v1.0.3
        with:
          command: build
          args: --release --locked --target=${{ matrix.target }} --color=always --verbose
          use-cross: ${{ runner.os == 'Linux' }}

      - name: Package for (*nix)
        if: runner.os != 'Windows'
        run: >
          tar -cv
          LICENSE README.md
          -C target/${{ matrix.target }}/release/ otadump
          | gzip --best
          > 'otadump-${{ steps.get_version.outputs.value }}-${{ matrix.target }}.tar.gz'
      - name: Package (Windows)
        if: runner.os == 'Windows'
        run: >
          7z a 'otadump-${{ steps.get_version.outputs.value }}-${{ matrix.target }}.zip'
          LICENSE README.md
          ./target/${{ matrix.target }}/release/otadump.exe
      - name: Upload artifact
        uses: actions/upload-artifact@694cdabd8bdb0f10b2cea11669e1bf5453eed0a6 # v4.2.0
        with:
          name: ${{ matrix.target }}
          path: |
            *.deb
            *.tar.gz
            *.zip
      - name: Create release
        if: ${{ github.ref == 'refs/heads/mainline' && startsWith(github.event.head_commit.message, 'chore(release)') }}
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v1
        with:
          draft: true
          files: |
            *.deb
            *.tar.gz
            *.zip
          name: ${{ steps.get_version.outputs.value }}
          tag_name: ""
